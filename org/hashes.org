* Imports
#+begin_src python :tangle ../hashes.py :results silent :session pybtc

import hashlib
import subprocess

#+end_src


* Functions
#+begin_src python :tangle ../hashes.py :results output silent :session pybtc

def sha256(data: bytes) -> bytes:
    '''Compute the SHA-256 hash of input data'''
    assert isinstance(data, bytes)
    return hashlib.sha256(data).digest()

def hash256(data: bytes) -> bytes:
    '''Compute the double SHA-256 hash of input data'''
    if not isinstance(data, bytes):
        print(f"data is {data} not bytes")
    return sha256(sha256(data))

def tagged_hash(tag: str, data: bytes) -> bytes:
    '''Compute the tagged hash of data as per BIP-340'''
    assert isinstance(data, bytes)
    assert isinstance(tag, str) or tag is None
    tag_hash = sha256(tag.encode())
    return sha256(tag_hash + tag_hash + data)

def ripemd160(data: bytes):
    '''Compute the RIPEMD-160 hash of input data'''
    assert isinstance(data, bytes)
    r = hashlib.new('ripemd160')
    r.update(data)
    return r.digest()

def hash160(data: bytes) -> bytes:
    '''Compute a special double hash'''
    assert isinstance(data, bytes)
    return ripemd160(sha256(data))

def _get_sha256_teststr(data):
    '''Build string for polling the sha256 reference'''
    return f"xxd -r -p <<< {data} | sha256sum | tr -d '  -'"

#+end_src


* Tests
#+begin_src python :tangle ../hashes.py :results silent :session pybtc

def run_tests():
    '''Some unit tests of the hash functions'''
    print("\nRunning hash function tests...\n")

    # Test 1: sha256 hash of hex string â€™deadbeefâ€™
    testdata = 'deadbeef'

    our_hash = sha256(bytes.fromhex(testdata))
    good_hash = subprocess.getoutput(_get_sha256_teststr(testdata))

    print(f"Test 1: H({testdata}) == {good_hash}")
    assert our_hash.hex() == good_hash
    print("Passed")

#+end_src

* Main
#+begin_src python :tangle ../hashes.py :results silent :session pytbtc

if __name__ == '__main__':
    run_tests()

#+end_src
